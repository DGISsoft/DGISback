// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Query struct {
}

type UserRole string

const (
	UserRoleRoleChairman   UserRole = "RoleChairman"
	UserRoleRoleDgis       UserRole = "RoleDGIS"
	UserRoleRoleStarosta   UserRole = "RoleStarosta"
	UserRoleRoleSupervisor UserRole = "RoleSupervisor"
)

var AllUserRole = []UserRole{
	UserRoleRoleChairman,
	UserRoleRoleDgis,
	UserRoleRoleStarosta,
	UserRoleRoleSupervisor,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleRoleChairman, UserRoleRoleDgis, UserRoleRoleStarosta, UserRoleRoleSupervisor:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
