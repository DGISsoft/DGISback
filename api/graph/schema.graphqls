scalar Time

enum UserRole {
  PREDSEDATEL
  DGIS
  STAROSTA
  SUPERVISOR
}

type User {
  id: ID!
  login: String!
  role: UserRole!
  fullName: String!
  building: String
  phoneNumber: String!
  telegramTag: String!
  createdAt: Time!
  updatedAt: Time!
}

input CreateUserInput {
  login: String!
  password: String! # Принимаем plaintext пароль
  role: UserRole!
  fullName: String!
  building: String
  phoneNumber: String!
  telegramTag: String!
  # createdAt и updatedAt обычно устанавливаются сервером
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  login: String!
  password: String!
}

type Query {
  me: User
  users: [User!]!
  user(id: ID!): User
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
  refreshToken: AuthPayload!
  createUser(input: CreateUserInput!): User!
}

directive @auth on FIELD_DEFINITION
directive @hasRole(roles: [UserRole!]!) on FIELD_DEFINITION
