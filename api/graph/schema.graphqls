scalar Time

enum UserRole {
  PREDSEDATEL
  DGIS
  STAROSTA
  SUPERVISOR
}

enum NotificationType {
  GENERAL
  PERSONAL
  SYSTEM
  ASSIGNMENT
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

type Notification {
  id: ID!
  type: NotificationType!
  title: String!
  message: String!
  sender: User!
  recipientIds: [ID!]!
  createdAt: Time!
}

type UserNotification {
  id: ID!
  user: User! # Получатель
  notification: Notification!
  status: NotificationStatus!
  readAt: Time
  createdAt: Time!
}

input SendNotificationInput {
  userIds: [ID!]!
  title: String!
  message: String!
  type: NotificationType
}

type User {
  id: ID!
  login: String!
  role: UserRole!
  fullName: String!
  building: String
  phoneNumber: String!
  telegramTag: String!
  markers: [Marker!]!
  createdAt: Time!
  updatedAt: Time!
}

type Marker {
  id: ID!
  markerId: String!
  position: [Float!]!
  label: String!
  users: [User!]!
}

input CreateUserInput {
  login: String!
  password: String!
  role: UserRole!
  fullName: String!
  building: String
  phoneNumber: String!
  telegramTag: String!
}

input CreateMarkerInput {
  markerId: String!
  position: [Float!]!
  label: String!
}

input AssignUserInput {
  userId: ID!
  markerId: ID!
}

input RemoveUserInput {
  userId: ID!
  markerId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

input LoginInput {
  login: String!
  password: String!
}

type Query {
  me: User
  users: [User!]!
  dashboard: [Marker!]!
  myNotifications(
    statuses: [NotificationStatus!]
    limit: Int
    offset: Int
  ): [UserNotification!]!
  unreadNotificationsCount: Int!
}

type Mutation {
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
  createUser(input: CreateUserInput!): User!
  deleteUser(id: ID!): Boolean!

  assignUser(input: AssignUserInput!): Marker!
  removeUser(input: RemoveUserInput!): Marker!

  deleteNotification(id: ID!): Boolean!
  sendNotification(input: SendNotificationInput!): Boolean!
  markNotificationAsRead(id: ID!): Boolean!
}
