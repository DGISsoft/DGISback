package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"log"

	"github.com/DGISsoft/DGISback/api/auth"
	"github.com/DGISsoft/DGISback/api/graph/model"
	"github.com/DGISsoft/DGISback/middleware"
	"github.com/DGISsoft/DGISback/models"
	"github.com/DGISsoft/DGISback/services/mongo/query"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Users is the resolver for the users field.
func (r *markerResolver) Users(ctx context.Context, obj *models.Marker) ([]*models.User, error) {
    // Если список ID пуст, возвращаем пустой срез
    if len(obj.Users) == 0 {
        return []*models.User{}, nil
    }

    // Создаем фильтр для поиска пользователей по списку ID
    filter := bson.M{"_id": bson.M{"$in": obj.Users}}

    collection := r.UserService.GetCollection("users") // Предполагаем доступ к коллекции
    var users []*models.User

    // Выполняем запрос
    err := query.FindMany(ctx, collection, filter, &users)
    if err != nil {
        log.Printf("markerResolver.Users: Failed to get users for marker %s: %v", obj.ID.Hex(), err)
        return nil, fmt.Errorf("could not load users for marker")
    }

    return users, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	// 1. Найти пользователя по логину
	user, err := r.UserService.GetUserByLogin(ctx, input.Login)
	if err != nil {
		log.Printf("Login: Authentication failed for login %s: %v", input.Login, err)
		return nil, fmt.Errorf("invalid credentials")
	}

	// 2. Проверить пароль
	if !r.UserService.CheckPassword(user.Password, input.Password) {
		log.Printf("Login: Invalid password provided for user %s", input.Login)
		return nil, fmt.Errorf("invalid credentials")
	}

	// 3. Сгенерировать JWT токен
	jwtManager := auth.NewJWTManager(auth.GetSecretKey(), auth.GetTokenDuration())
	tokenString, err := jwtManager.GenerateToken(user)
	if err != nil {
		log.Printf("Login: Failed to generate token for user %s: %v", user.Login, err)
		return nil, fmt.Errorf("could not generate authentication token")
	}

	// 4. Подготовить ответ
	authPayload := &model.AuthPayload{
		Token: tokenString,
		User:  user,
	}

	// 5. НЕМЕДЛЕННО установить cookie
	// Получаем ResponseWriter из контекста
	writer, err := middleware.GetResponseWriterFromContext(ctx)
	if err != nil {
		log.Printf("Login: CRITICAL - Could not get ResponseWriter from context: %v", err)
		// Это критическая ошибка
		return nil, fmt.Errorf("internal error (token generated, but could not set cookie)")
	}
	// Устанавливаем cookie напрямую
	middleware.SignalSetAuthCookieDirect(writer, tokenString)

	// 6. Вернуть AuthPayload
	// Токен возвращается в теле ответа (для API/доп. сценариев)
	// Cookie уже установлена.
	return authPayload, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// 1. НЕМЕДЛЕННО очистить cookie
	writer, err := middleware.GetResponseWriterFromContext(ctx)
	if err != nil {
		log.Printf("Logout: Could not get ResponseWriter from context: %v", err)
		// Не критично, просто логируем
	} else {
		middleware.SignalClearAuthCookieDirect(writer)
	}

	// 2. Всегда возвращаем true
	return true, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// AddMarker is the resolver for the addMarker field.
func (r *mutationResolver) AddMarker(ctx context.Context, input model.CreateMarkerInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AddMarker - addMarker"))
}

// AssignUser is the resolver for the assignUser field.
func (r *mutationResolver) AssignUser(ctx context.Context, input model.AssignUserInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AssignUser - assignUser"))
}

// RemoveUser is the resolver for the removeUser field.
func (r *mutationResolver) RemoveUser(ctx context.Context, input model.RemoveUserInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: RemoveUser - removeUser"))
}

// AssignMany is the resolver for the assignMany field.
func (r *mutationResolver) AssignMany(ctx context.Context, markerID primitive.ObjectID, userIds []primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AssignMany - assignMany"))
}

// ClearMarker is the resolver for the clearMarker field.
func (r *mutationResolver) ClearMarker(ctx context.Context, markerID primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: ClearMarker - clearMarker"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	// 1. Получить информацию о пользователе из контекста
	// Эта информация была помещена туда AuthMiddleware, если cookie был действителен.
	userClaims, isAuthenticated := middleware.GetUserFromContext(ctx)
	if !isAuthenticated {
		// Пользователь не прошел аутентификацию (нет действительного cookie)
		return nil, fmt.Errorf("unauthorized: valid authentication cookie is required")
	}

	// 2. Преобразовать UserID из токена (string) в ObjectID MongoDB
	// userClaims.UserID это Hex-строка ObjectID, сохраненная в JWT
	userIDHex := userClaims.UserID
	userObjectID, err := primitive.ObjectIDFromHex(userIDHex)
	if err != nil {
		// Это означает, что токен поврежден или был сгенерирован некорректно
		log.Printf("Me: Invalid ObjectID format in token claims for UserID: %s", userIDHex)
		return nil, fmt.Errorf("invalid authentication data")
	}

	// 3. Получить полную информацию о пользователе из БД по ObjectID
	// Используем метод из вашего UserService
	user, err := r.UserService.GetUserByID(ctx, userObjectID)
	if err != nil {
		// Это может произойти, если пользователь был удален из БД после выдачи токена
		log.Printf("Me: Failed to retrieve user data from DB for ID %s (Hex: %s): %v", userObjectID.Hex(), userIDHex, err)
		return nil, fmt.Errorf("user account unavailable")
	}

	// 4. Вернуть объект пользователя
	// Данные берутся из БД, что гарантирует их актуальность.
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// AllMarkers is the resolver for the allMarkers field.
func (r *queryResolver) AllMarkers(ctx context.Context) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AllMarkers - allMarkers"))
}

// Marker is the resolver for the marker field.
func (r *queryResolver) Marker(ctx context.Context, id primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Marker - marker"))
}

// MarkerByCode is the resolver for the markerByCode field.
func (r *queryResolver) MarkerByCode(ctx context.Context, code string) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: MarkerByCode - markerByCode"))
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context) ([]*models.Marker, error) {
	// 1. Получить ВСЕ маркеры из базы данных ВМЕСТЕ С НАЗНАЧЕННЫМИ ПОЛЬЗОВАТЕЛЯМИ
	// Используем метод из вашего MarkerService, который делает $lookup
	// Это один агрегационный запрос к БД
	markers, err := r.MarkerService.GetAllMarkersWithUsers(ctx) // <-- Изменено здесь
	if err != nil {
		// Ошибка на стороне сервера при доступе к БД
		log.Printf("Dashboard: Failed to retrieve all markers with users from DB: %v", err)
		return nil, fmt.Errorf("could not load dashboard data")
	}

	// 2. Вернуть список маркеров
	// []*models.Marker (с заполненным полем .Users) должно быть совместимо
	// с []*model.Marker в GraphQL-схеме
	return markers, nil
}

// Markers is the resolver for the markers field.
func (r *userResolver) Markers(ctx context.Context, obj *models.User) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Markers - markers"))
}

// Marker returns MarkerResolver implementation.
func (r *Resolver) Marker() MarkerResolver { return &markerResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type markerResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
