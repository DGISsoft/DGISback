package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"log"

	"github.com/DGISsoft/DGISback/api/auth"
	"github.com/DGISsoft/DGISback/api/graph/model"
	"github.com/DGISsoft/DGISback/middleware" // Убедитесь, что путь правильный
	"github.com/DGISsoft/DGISback/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	    // 1. Получить пользователя по логину через UserService
    user, err := r.UserService.GetUserByLogin(ctx, input.Login)
    if err != nil {
        // Можно вернуть более общую ошибку для безопасности
        return nil, fmt.Errorf("invalid")
    }

    // 2. Проверить пароль
    if !r.UserService.CheckPassword(user.Password, input.Password) {
        return nil, fmt.Errorf("invalids")
    }

    // 3. Создать JWTManager (используя ключ и длительность из env или дефолтные)
    jwtManager := auth.NewJWTManager(auth.GetSecretKey(), auth.GetTokenDuration())

    // 4. Сгенерировать токен
    tokenString, err := jwtManager.GenerateToken(user)
    if err != nil {
        log.Printf("Failed to generate token for user %s: %v", user.Login, err)
        return nil, fmt.Errorf("could not generate token")
    }

    // 5. Вернуть AuthPayload
    return &model.AuthPayload{
        Token: tokenString,
        User:  user, // Предполагается, что модель User в GraphQL совместима с models.User
    }, nil
}


// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
    // Логика выхода
    return true, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
    // 1. Получить информацию о пользователе из контекста (добавленную middleware)
    claims, ok := middleware.GetUserFromContext(ctx)
    if !ok {
        // Middleware не добавила пользователя в контекст, значит, пользователь не аутентифицирован
        return nil, fmt.Errorf("not authenticated")
    }

    // 2. Преобразовать ObjectID из строки в primitive.ObjectID
    userID, err := primitive.ObjectIDFromHex(claims.UserID)
    if err != nil {
        log.Printf("Invalid user ID in token claims: %s", claims.UserID)
        return nil, fmt.Errorf("invalid token")
    }

    // 3. Получить полную информацию о пользователе из БД
    // Это гарантирует, что мы получаем актуальные данные
    user, err := r.UserService.GetUserByID(ctx, userID)
    if err != nil {
        log.Printf("Failed to get user by ID %s from DB: %v", claims.UserID, err)
        // Если пользователь не найден, возможно, аккаунт был удален
        return nil, fmt.Errorf("user not found")
    }

    return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
    // 1. Проверить аутентификацию (обычно список пользователей защищен)
    _, ok := middleware.GetUserFromContext(ctx)
    if !ok {
        return nil, fmt.Errorf("not authenticated")
    }
    // 2. Проверить права доступа (опционально, например, только администраторы)
    // claims, _ := middleware.GetUserFromContext(ctx)
    // if claims.Role != models.AdminRole { return nil, fmt.Errorf("access denied") }

    // 3. Получить список пользователей из БД
    users, err := r.UserService.GetUsers(ctx)
    if err != nil {
        log.Printf("Failed to get users list: %v", err)
        return nil, fmt.Errorf("could not fetch users")
    }

    return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
    // 1. Проверить аутентификацию (обычно просмотр профиля требует аутентификации)
    _, ok := middleware.GetUserFromContext(ctx)
    if !ok {
        return nil, fmt.Errorf("not authenticated")
    }
    // 2. Проверить права доступа (опционально)
    // Можно проверить, запрашивает ли пользователь свой собственный профиль или имеет права админа
    // claims, _ := middleware.GetUserFromContext(ctx)
    // if claims.UserID != id.Hex() && claims.Role != models.AdminRole { return nil, fmt.Errorf("access denied") }

    // 3. Получить пользователя из БД по ID
    user, err := r.UserService.GetUserByID(ctx, id)
    if err != nil {
        if err.Error() == "user not found" {
            return nil, fmt.Errorf("user not found") // Более точная ошибка
        }
        log.Printf("Failed to get user by ID %s: %v", id.Hex(), err)
        return nil, fmt.Errorf("could not fetch user")
    }

    return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
