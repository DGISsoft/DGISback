package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/DGISsoft/DGISback/api/auth"
	"github.com/DGISsoft/DGISback/api/graph/model"
	"github.com/DGISsoft/DGISback/middleware"
	"github.com/DGISsoft/DGISback/models"
	"github.com/DGISsoft/DGISback/services/mongo/query"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	// 1. Найти пользователя по логину
	user, err := r.UserService.GetUserByLogin(ctx, input.Login)
	if err != nil {
		log.Printf("Login: Authentication failed for login %s: %v", input.Login, err)
		return nil, fmt.Errorf("invalid credentials")
	}

	// 2. Проверить пароль
	if !r.UserService.CheckPassword(user.Password, input.Password) {
		log.Printf("Login: Invalid password provided for user %s", input.Login)
		return nil, fmt.Errorf("invalid credentials")
	}

	// 3. Сгенерировать JWT токен
	jwtManager := auth.NewJWTManager(auth.GetSecretKey(), auth.GetTokenDuration())
	tokenString, err := jwtManager.GenerateToken(user)
	if err != nil {
		log.Printf("Login: Failed to generate token for user %s: %v", user.Login, err)
		return nil, fmt.Errorf("could not generate authentication token")
	}

	// 4. Подготовить ответ
	authPayload := &model.AuthPayload{
		Token: tokenString,
		User:  user,
	}

	// 5. НЕМЕДЛЕННО установить cookie
	// Получаем ResponseWriter из контекста
	writer, err := middleware.GetResponseWriterFromContext(ctx)
	if err != nil {
		log.Printf("Login: CRITICAL - Could not get ResponseWriter from context: %v", err)
		// Это критическая ошибка
		return nil, fmt.Errorf("internal error (token generated, but could not set cookie)")
	}
	// Устанавливаем cookie напрямую
	middleware.SignalSetAuthCookieDirect(writer, tokenString)

	// 6. Вернуть AuthPayload
	// Токен возвращается в теле ответа (для API/доп. сценариев)
	// Cookie уже установлена.
	return authPayload, nil
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	// 1. НЕМЕДЛЕННО очистить cookie
	writer, err := middleware.GetResponseWriterFromContext(ctx)
	if err != nil {
		log.Printf("Logout: Could not get ResponseWriter from context: %v", err)
		// Не критично, просто логируем
	} else {
		middleware.SignalClearAuthCookieDirect(writer)
	}

	// 2. Всегда возвращаем true
	return true, nil
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// CreateUser is the resolver for the createUser field.
// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	// 1. Получить информацию о текущем пользователе из контекста (для логирования)
	// AuthMiddleware уже проверила @auth и @hasRole
	userClaims, isAuthenticated := middleware.GetUserFromContext(ctx)
	if !isAuthenticated {
		return nil, fmt.Errorf("unauthorized")
	}
	log.Printf("CreateUser: Requested by user ID %s", userClaims.UserID)

	// 2. Проверить, существует ли пользователь с таким логином
	_, err := r.UserService.GetUserByLogin(ctx, input.Login)
	if err == nil {
		// Пользователь найден, значит логин занят
		return nil, fmt.Errorf("user with login '%s' already exists", input.Login)
	}
	// Если ошибка "user not found", это нормально и мы можем продолжать

	// 3. Создать объект пользователя из входных данных
	user := &models.User{
		Login:       input.Login,
		Password:    input.Password, // Будет захеширован в сервисе
		Role:        models.UserRole(input.Role), // Преобразование enum
		FullName:    input.FullName,
		Building:    input.Building, // Может быть nil
		PhoneNumber: input.PhoneNumber,
		TelegramTag: input.TelegramTag,
		Markers:     []primitive.ObjectID{}, // Пока без маркеров
		CreatedAt:   time.Now(),
		UpdatedAt:   time.Now(),
	}

	// 4. Валидация роли (на всякий случай, хотя GraphQL схема это частично проверяет)
	if !user.Role.IsValid() {
		return nil, fmt.Errorf("invalid user role: %s", input.Role)
	}

	// 5. Вызвать сервис для создания пользователя
	err = r.UserService.CreateUser(ctx, user)
	if err != nil {
		log.Printf("CreateUser: Failed to create user in service: %v", err)
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	// 6. Автоматическая привязка к маркеру для STAROSTA и SUPERVISOR
	if user.Role == models.UserRoleStarosta || user.Role == models.UserRoleSupervisor {
		if user.Building != nil && *user.Building != "" {
			log.Printf("CreateUser: Attempting to auto-assign user %s to marker for building '%s'", user.ID.Hex(), *user.Building)
			
			// Найти маркер по label (который соответствует building)
			marker, err := r.MarkerService.GetMarkerByLabel(ctx, *user.Building)
			if err != nil {
				log.Printf("CreateUser: Warning - Could not find marker for building '%s': %v", *user.Building, err)
				// Не возвращаем ошибку, просто логируем - пользователь создан, но не привязан
			} else {
				// Назначить пользователя на найденный маркер
				err = r.MarkerService.AssignUserToMarker(ctx, user.ID, marker.ID)
				if err != nil {
					log.Printf("CreateUser: Warning - Failed to assign user %s to marker %s: %v", user.ID.Hex(), marker.ID.Hex(), err)
					// Не возвращаем ошибку, просто логируем
				} else {
					log.Printf("CreateUser: Successfully assigned user %s to marker %s for building '%s'", user.ID.Hex(), marker.ID.Hex(), *user.Building)
					// Обновляем список маркеров у пользователя
					user.Markers = append(user.Markers, marker.ID)
				}
			}
		} else {
			log.Printf("CreateUser: User %s has role %s but no building specified, skipping auto-assignment", user.ID.Hex(), user.Role)
		}
	}

	// 7. Вернуть созданного пользователя (без пароля)
	user.Password = "" // Убедимся, что пароль не попадет в ответ
	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id primitive.ObjectID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser - deleteUser"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// AddMarker is the resolver for the addMarker field.
func (r *mutationResolver) AddMarker(ctx context.Context, input model.CreateMarkerInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AddMarker - addMarker"))
}

// AssignUser is the resolver for the assignUser field.
func (r *mutationResolver) AssignUser(ctx context.Context, input model.AssignUserInput) (*models.Marker, error) {
	// 1. ID уже типа primitive.ObjectID, конвертация не нужна
	userID := input.UserID
	markerID := input.MarkerID

	// 2. Вызываем метод сервиса для назначения пользователя
	// Предполагается, что у MarkerService есть такой метод
	err := r.MarkerService.AssignUserToMarker(ctx, userID, markerID)
	if err != nil {
		log.Printf("AssignUser: Failed to assign user %s to marker %s: %v", userID.Hex(), markerID.Hex(), err)
		// Можно возвращать более конкретные ошибки GraphQL, если нужно
		return nil, fmt.Errorf("could not assign user to marker: %w", err)
	}

	// 3. Получаем обновленный маркер из БД
	updatedMarker, err := r.MarkerService.GetMarkerByID(ctx, markerID)
	if err != nil {
		log.Printf("AssignUser: Failed to get updated marker %s: %v", markerID.Hex(), err)
		// Это не критично для мутации, но клиент не получит обновленные данные
		// Можно вернуть ошибку или пустой маркер
		return nil, fmt.Errorf("failed to fetch updated marker data")
	}

	// 4. Возвращаем обновленный маркер
	// Убедитесь, что поле Users заполнено, если клиент ожидает его
	// (например, через GetAllMarkersWithUsers или отдельный запрос)
	return updatedMarker, nil
}

// RemoveUser is the resolver for the removeUser field.
func (r *mutationResolver) RemoveUser(ctx context.Context, input model.RemoveUserInput) (*models.Marker, error) {
	// 1. ID уже типа primitive.ObjectID, конвертация не нужна
	userID := input.UserID
	markerID := input.MarkerID

	// 2. Вызываем метод сервиса для удаления пользователя
	// Предполагается, что у MarkerService есть такой метод
	err := r.MarkerService.RemoveUserFromMarker(ctx, userID, markerID)
	if err != nil {
		log.Printf("RemoveUser: Failed to remove user %s from marker %s: %v", userID.Hex(), markerID.Hex(), err)
		return nil, fmt.Errorf("could not remove user from marker: %w", err)
	}

	// 3. Получаем обновленный маркер из БД
	updatedMarker, err := r.MarkerService.GetMarkerByID(ctx, markerID)
	if err != nil {
		log.Printf("RemoveUser: Failed to get updated marker %s: %v", markerID.Hex(), err)
		return nil, fmt.Errorf("failed to fetch updated marker data")
	}

	// 4. Возвращаем обновленный маркер
	return updatedMarker, nil
}

// AssignMany is the resolver for the assignMany field.
func (r *mutationResolver) AssignMany(ctx context.Context, markerID primitive.ObjectID, userIds []primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AssignMany - assignMany"))
}

// ClearMarker is the resolver for the clearMarker field.
func (r *mutationResolver) ClearMarker(ctx context.Context, markerID primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: ClearMarker - clearMarker"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	// 1. Получить информацию о пользователе из контекста
	// Эта информация была помещена туда AuthMiddleware, если cookie был действителен.
	userClaims, isAuthenticated := middleware.GetUserFromContext(ctx)
	if !isAuthenticated {
		// Пользователь не прошел аутентификацию (нет действительного cookie)
		return nil, fmt.Errorf("unauthorized: valid authentication cookie is required")
	}

	// 2. Преобразовать UserID из токена (string) в ObjectID MongoDB
	userIDHex := userClaims.UserID
	userObjectID, err := primitive.ObjectIDFromHex(userIDHex)
	if err != nil {
		log.Printf("Me: Invalid ObjectID format in token for UserID: %s", userIDHex)
		return nil, fmt.Errorf("invalid authentication data")
	}

	// 3. Получить полную информацию о пользователе из БД по ObjectID
	user, err := r.UserService.GetUserByID(ctx, userObjectID)
	if err != nil {
		log.Printf("Me: Failed to get user data for ID %s: %v", userIDHex, err)
		return nil, fmt.Errorf("user account unavailable")
	}

	// 4. Вернуть объект пользователя
	return user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// AllMarkers is the resolver for the allMarkers field.
func (r *queryResolver) AllMarkers(ctx context.Context) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AllMarkers - allMarkers"))
}

// Marker is the resolver for the marker field.
func (r *queryResolver) Marker(ctx context.Context, id primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Marker - marker"))
}

// MarkerByCode is the resolver for the markerByCode field.
func (r *queryResolver) MarkerByCode(ctx context.Context, code string) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: MarkerByCode - markerByCode"))
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context) ([]*models.Marker, error) {
	log.Println("Dashboard resolver called")

	markers, err := r.MarkerService.GetAllMarkersWithUsers(ctx)
	if err != nil {
		log.Printf("Dashboard: Failed to retrieve all markers with users from DB: %v", err)
		return nil, fmt.Errorf("could not load dashboard data")
	}

	log.Printf("Dashboard: Successfully retrieved %d markers from service", len(markers))

	// --- КРИТИЧЕСКОЕ ОТЛАДОЧНОЕ ЛОГИРОВАНИЕ ---
	// Проверим, действительно ли поле Users заполнено в возвращаемых данных
	if len(markers) > 0 {
		firstMarker := markers[0]
		log.Printf("Dashboard: First marker ID: %s, Label: %s", firstMarker.ID.Hex(), firstMarker.Label)
		log.Printf("Dashboard: First marker Users field length: %d", len(firstMarker.Users))
		if len(firstMarker.Users) > 0 {
			firstUser := firstMarker.Users[0]
			if firstUser != nil {
				log.Printf("Dashboard: First marker's first user ID: %s, Name: %s", firstUser.ID.Hex(), firstUser.FullName)
			} else {
				log.Println("Dashboard: WARNING: First marker's first user is NIL")
			}
		} else {
			log.Println("Dashboard: First marker has NO users")
			// Давайте проверим, есть ли AssignedUserIds и что там
			// (если вы оставили это поле в models.Marker)
			// log.Printf("Dashboard: First marker AssignedUserIds: %v", firstMarker.AssignedUserIds)
		}
	}
	// --- КОНЕЦ ОТЛАДОЧНОГО ЛОГИРОВАНИЯ ---

	return markers, nil
}

// Markers is the resolver for the markers field.
func (r *userResolver) Markers(ctx context.Context, obj *models.User) ([]*models.Marker, error) {
	// 1. Оптимизация: если у пользователя нет назначенных маркеров,
	// сразу возвращаем пустой список.
	// Это справедливо для PREDSEDATEL и DGIS.
	if len(obj.Markers) == 0 {
		return []*models.Marker{}, nil
	}

	// 2. Для STAROSTA/SUPERVISOR: получаем маркеры из БД.
	// Создаем фильтр для поиска маркеров по списку ID из obj.Markers
	filter := bson.M{"_id": bson.M{"$in": obj.Markers}}

	// 3. Получаем коллекцию маркеров.
	// Предполагается, что *resolver (r) имеет доступ к MarkerService.
	// Убедитесь, что в структуре Resolver есть поле *MarkerService.
	markerCollection := r.MarkerService.GetCollection("markers")

	// 4. Выполняем запрос к БД
	var markers []*models.Marker
	// Используем ваш пакет query для поиска нескольких документов
	err := query.FindMany(ctx, markerCollection, filter, &markers)
	if err != nil {
		// Логируем ошибку
		log.Printf("userResolver.Markers: DB error for user %s (%s): %v", obj.Login, obj.ID.Hex(), err)
		// Возвращаем пустой список вместо паники/ошибки,
		// чтобы не ломать весь запрос `me` из-за одной части.
		return []*models.Marker{}, nil
	}

	// 5. Возвращаем найденные маркеры
	return markers, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
