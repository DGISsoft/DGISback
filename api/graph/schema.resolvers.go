package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/DGISsoft/DGISback/api/graph/model"
	"github.com/DGISsoft/DGISback/models"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// Users is the resolver for the users field.
func (r *markerResolver) Users(ctx context.Context, obj *models.Marker) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.CreateUserInput) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// AddMarker is the resolver for the addMarker field.
func (r *mutationResolver) AddMarker(ctx context.Context, input model.CreateMarkerInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AddMarker - addMarker"))
}

// AssignUser is the resolver for the assignUser field.
func (r *mutationResolver) AssignUser(ctx context.Context, input model.AssignUserInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AssignUser - assignUser"))
}

// RemoveUser is the resolver for the removeUser field.
func (r *mutationResolver) RemoveUser(ctx context.Context, input model.RemoveUserInput) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: RemoveUser - removeUser"))
}

// AssignMany is the resolver for the assignMany field.
func (r *mutationResolver) AssignMany(ctx context.Context, markerID primitive.ObjectID, userIds []primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AssignMany - assignMany"))
}

// ClearMarker is the resolver for the clearMarker field.
func (r *mutationResolver) ClearMarker(ctx context.Context, markerID primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: ClearMarker - clearMarker"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*models.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id primitive.ObjectID) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// AllMarkers is the resolver for the allMarkers field.
func (r *queryResolver) AllMarkers(ctx context.Context) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: AllMarkers - allMarkers"))
}

// Marker is the resolver for the marker field.
func (r *queryResolver) Marker(ctx context.Context, id primitive.ObjectID) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Marker - marker"))
}

// MarkerByCode is the resolver for the markerByCode field.
func (r *queryResolver) MarkerByCode(ctx context.Context, code string) (*models.Marker, error) {
	panic(fmt.Errorf("not implemented: MarkerByCode - markerByCode"))
}

// Dashboard is the resolver for the dashboard field.
func (r *queryResolver) Dashboard(ctx context.Context) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Dashboard - dashboard"))
}

// Markers is the resolver for the markers field.
func (r *userResolver) Markers(ctx context.Context, obj *models.User) ([]*models.Marker, error) {
	panic(fmt.Errorf("not implemented: Markers - markers"))
}

// Marker returns MarkerResolver implementation.
func (r *Resolver) Marker() MarkerResolver { return &markerResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type markerResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
