// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Query struct {
}

type UserInput struct {
	Login       string   `json:"login"`
	Password    string   `json:"password"`
	Role        UserRole `json:"role"`
	FullName    string   `json:"fullName"`
	Building    *string  `json:"building,omitempty"`
	PhoneNumber string   `json:"phoneNumber"`
	TelegramTag string   `json:"telegramTag"`
}

type UserUpdateInput struct {
	Login       *string   `json:"login,omitempty"`
	Role        *UserRole `json:"role,omitempty"`
	FullName    *string   `json:"fullName,omitempty"`
	Building    *string   `json:"building,omitempty"`
	PhoneNumber *string   `json:"phoneNumber,omitempty"`
	TelegramTag *string   `json:"telegramTag,omitempty"`
}

type UserRole string

const (
	UserRolePredsedatel UserRole = "Predsedatel"
	UserRoleDgis        UserRole = "Dgis"
	UserRoleStarosta    UserRole = "Starosta"
	UserRoleSupervisor  UserRole = "Supervisor"
)

var AllUserRole = []UserRole{
	UserRolePredsedatel,
	UserRoleDgis,
	UserRoleStarosta,
	UserRoleSupervisor,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRolePredsedatel, UserRoleDgis, UserRoleStarosta, UserRoleSupervisor:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
